import Alloy.C

open scoped Alloy.C

alloy c section

#include <lean/lean.h>
#include <signal.h>
#include <stdio.h>

static lean_object* active_callbacks[32] = {0};

void handler(int x) { lean_apply_1(active_callbacks[x], lean_io_mk_world()); }

extern int lean_signal_to_int(lean_object*);

end

-- This should be complete, but generated by ChatGPT, so check if time
alloy c enum Signal => int
  | hangup => SIGHUP
  | interrupted => SIGINT
  | quit => SIGQUIT
  | illegal_instruction => SIGILL
  | trace => SIGTRAP
  | abort => SIGABRT
  | emulate => SIGEMT
  | fpe => SIGFPE
  | kill => SIGKILL
  | bus_error => SIGBUS
  | segmentation_fault => SIGSEGV
  | syscall_error => SIGSYS
  | pipe => SIGPIPE
  | alarm => SIGALRM
  | terminate => SIGTERM
  | urgent => SIGURG
  | stop => SIGSTOP
  | keyboard_stop => SIGTSTP
  | continue => SIGCONT
  | child_status => SIGCHLD
  | background_read => SIGTTIN
  | background_write => SIGTTOU
  | io => SIGIO
  | cpu_limit => SIGXCPU
  | file_size_limit => SIGXFSZ
  | virtual_alarm => SIGVTALRM
  | profiling_alarm => SIGPROF
  | window_change => SIGWINCH
  | info => SIGINFO
  | user1 => SIGUSR1
  | user2 => SIGUSR2
deriving Inhabited


alloy c extern def Signal.signal (sig : Signal) (callback : IO Unit) : IO Unit := {
  int signum = of_lean<Signal>(sig);
  active_callbacks[signum] = callback;
  signal(signum, handler);
  return lean_io_result_mk_ok(lean_box(0));
}



-- alloy c enum Signal => int
--   | interrupted => SIGINT

-- @[export lean_signal_to_int] def Signal.toInt : Signal -> UInt32
--   | .sigint => 2

-- THIS DOES NOT WORK (why????)

-- void handler(int x) {
--   printf("Handler called in C");
--   lean_apply_1(lean_apply_1(active_callbacks[x], lean_box(x)), lean_io_mk_world());
-- }

/-
alloy c extern def Signal.signal (signum : Signal)
  (callback : UInt32 -> IO Unit) : IO Unit := {
  printf("In the signal api");
  int sig = lean_signal_to_int(signum);
  active_callbacks[sig] = callback;
  signal(sig, handler);
  lean_dec(signum);
  return lean_io_result_mk_ok(lean_box(0));
}
-/
